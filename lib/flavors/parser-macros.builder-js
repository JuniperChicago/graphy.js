/* eslint-disable */

@ // possible mode types are:
@ // TTL: Turtle
@ // TRIG: TriG
@ // NT: N-Triples
@ // NQ: N-Quads
@ // T: Turtle or TriG
@ // N: N-Triples or N-Quads

@ // constants for all modes
@maro constants()
	@ // all modes need to unescape characters inside of string literals
	const R_ESCAPES = /(\\\\)|\\([^tbnrfu\\])/g;
@end

/* whitespace */


@ /** control variables **/

@ // count how many braces need closing
@set match_counter 0

@ // whether or not the method macro is going to account for relative iris
@set RELATIVE_IRIS true




@ // keys for the object that represents the RDF object term
@set KEY_IRI 'iri'
@set KEY_LITERAL_VALUE 'value'
@set KEY_LITERAL_DATATYPE 'datatype'
@set KEY_LITERAL_LANGUAGE 'language'
@set KEY_BLANK_NODE_LABEL 'label'

@macro dot(key)
.@{key}
@end


@macro iri()
@{dot(KEY_IRI)}
@end

@macro literal_value()
@{dot(KEY_LITERAL_VALUE)}
@end

@macro literal_datatype()
@{dot(KEY_LITERAL_DATATYPE)}
@end

@macro literal_language()
@{dot(KEY_LITERAL_LANGUAGE)}
@end

@macro blank_node_label()
@{dot(KEY_BLANK_NODE_LABEL)}
@end



@ // save current state to stack
@macro push_state(state)
	this.nested.push([this.subject, this.predicate, '@{state}']);
@end

@ // restore previous state from stack
@macro pop_state()
	let s_resume_state;
	[this.subject, this.predicate, s_resume_state] = this.nested.pop();
	return this[s_resume_state]();
@end



@ // change state
@macro continue(method)
	return this.@{method}();
@end


@ // set resume state & stop parsing in this stack
@macro resume(mode, use_field_chunk)
	// update index value
	this.i = i;

	// not yet eos
	if(i < this.n) {
		// expected token was not found
		if(0 === i) return this.defer.parse_error('@{mode}');
	}

	// save state before pausing
	this.resume = this.@{mode};

	// store what is unparsed
	this.pre = @{use_field_chunk?'this.':''}s.slice(i);

	// if we're not parsing a stream, then this is an error
	return this.pause && this.pause();
@end




@ // test the current character
@macro if_char(a, b)
	if(`@{a}` === x@{b?' || `':''}@{b?b:''}@{b?'` === x':''}) {
@end

@ // else, test the current character
@macro else_if_char(a, b)
	} else @{if_char(a, b)}
@end

@ // else, test the current character without use of intermediate variable
@macro else_if_char_only(a)
	} else if (`@{a}` === s[i]) {
@end


@ // exec regex and store match
@macro if_match(regex, match, local)
	@ // count how many else branches we'll need to close
	@set match_counter (match_counter + 0)

	// prepare sticky regex index
	@{regex}.lastIndex = i;

	@ // store the match
	@if match
		// execute regex
		let @{match} = @{regex}.exec(s);

		// regex was a match
		if(@{match}) {
	@ // no need to store the match
	@else
		if(@{regex}.exec(s)) {
	@end

	// advance index
	@{local? '': 'this.'}i = @{regex}.lastIndex;
@end

@ // try next match
@macro else_if_match(regex, match, local)
	@ // increment number of else branches we'll need to close
	@set match_counter (match_counter + 1)

	@ // when previous match fails
	} else {
		@ // try next match
		@{if_match(regex, match, local)}
@end


@ // close all preceeding else branches
@macro end_else()
 	@ // end last branch
	}

	@ // for all other branches
	@repeat match_counter
		} // @{loop.index}
	@end

	@ // reset match counter
	@set match_counter 0
@end


@ // all matches failed, pause parser
@macro else_retry()
	// match counter: @{match_counter}
	} else {
		// break loop to retry on next chunk if eos
		break;

	@ // close all preceeding else branches
	@{end_else()}
@end




@ // declare a parse state
@macro method(name, extern)
	// parse state for @{name}
	@if extern
		@{name}: () => {
	@else
		@{name}() {
	@end
		// destruct chunk, length, and index
		let {s, n, i} = this;

		// start labeled loop, run while there are characters
		@{name}: while(i < n) {
@end


@ // end parse state method
@macro end_method(name, extern)
		}

		// ran out of characters
		@{resume(name)}
	}@{extern? ',': ''}
@end




@ // emit a triple event to listener using current subject/predicate/object
@macro emit_triple()
	this.triple({
		subject: this.subject,
		predicate: this.predicate,
		object: this.object,
	});
@end


@ // emit triple and return control to whatever function asked for it
@macro end_of_triple()
	// at this point, a new triple has been parsed
	@{emit_triple()}

	// goto next parsing state
	return this.after_end_of_triple();
@end


@ // consume whitespace
@macro whitespace(offset, local)
	R_WS.lastIndex = @{offset};
	R_WS.exec(s);
	@{!local? 'this.': ''}i = R_WS.lastIndex;
@end



@ // iriref macro: extract uri from iri ref
@if N
	@ // only absolute iris exist in N-Triple and N-Quads
	@macro iriref(term, match, object)
		this.@{term} = @{object?'new Iri(':''}@{match}[1]@{object?')':''};
	@end
@elseif T
	@ // relative IRIs only exist in TTL / TRIG
	@macro iriref(term, match, object, set_base)
		// ref iri
		let s_iri = @{match}[1];

		// absolute iri
		if(!this.base || R_IRI_ABSOLUTE.test(s_iri)) {
			// set @{term}
			this.@{term} = @{object?'new Iri(':''}s_iri@{object?')':''};
		}
		// relative iri
		else {
			// make @{term}
			switch(s_iri[0]) {
				case '#':
					this.@{term} = @{object?'new Iri(':''}this.base + s_iri@{object?')':''};
					break;
				case '?':
					this.@{term} = @{object?'new Iri(':''}this.base.replace(/(\?.*)?$/, s_iri)@{object?')':''};
					break;
				case '/':
					// relative to scheme
					if('/' === s_iri[1]) {
						this.@{term} = @{object?'new Iri(':''}this.base_scheme + F_DOT_SEGMENTS(s_iri.substr(1))@{object?')':''};
					}
					// relative to root
					else {
						this.@{term} = @{object?'new Iri(':''}this.base_root + F_DOT_SEGMENTS(s_iri)@{object?')':''};
					}
					break;
				// empty
				case undefined:
					// identity
					this.@{term} = @{object?'new Iri(':''}this.base@{object?')':''};
					break;
				// dot segment
				case '.':
					// prepend so it is relative to root
					s_iri = '/'+s_iri;
				// relative to path
				default:
					this.@{term} = @{object?'new Iri(':''}this.base_root + F_DOT_SEGMENTS(this.base_path + s_iri)@{object?')':''};
			}
		}

		@ // update the base iri
		@if set_base
			let m_base_iri = R_BASE_IRI.exec(this.base);
			this.@{term} = m_base_iri[1];
			this.@{term}_root = m_base_iri[2] || '';
			this.@{term}_scheme = m_base_iri[3] || '';
			this.@{term}_path = m_base_iri[4] || ''; 
		@end
	@end
@end


@ // set object value and datatype for numeric literal
@macro numeric_literal()
	// make literal
	let w_object = this.object = new Literal(parseFloat(m_numeric_literal[1]));

	// it has exponent term, xsd:double
	if(m_numeric_literal[4]) {
		w_object.datatype = P_IRI_XSD_DOUBLE;
	}
	// contains decimal point, xsd:decimal
	else if(m_numeric_literal[2] || m_numeric_literal[3]) {
		w_object.datatype = P_IRI_XSD_DECIMAL;
	}
	// otherwise, it is an integer
	else {
		w_object.datatype = P_IRI_XSD_INTEGER;
	}
@end


@ // set object value and datatype for boolean literal
@macro boolean_literal()
	// make literal
	let w_object = this.object = new Literal(m_boolean_literal[1]? true: false);

	// xsd:boolean
	w_object.datatype = P_IRI_XSD_BOOLEAN;
@end


@ // set the object value of a string literal
@macro set_string_literal(match, version)
	// set literal value
	h_literal@{literal_value()} = 
	@if 'no-escape' == version
		@{match}[1];
	@else
		JSON.parse('"'
			+@{match}[1]
				.replace(R_ESCAPES, '$1$2') // no need to escape anything other than reserved characters
				@if 'long' == version
					.replace(/\n/g, '\\n') // newline breaks not allowed in JSON strings
				@end
				.replace(/"/g, '\\"')
			+'"');
	@end
@end



@ // assert the prefix found in prefixed name is valid
@macro valid_prefix(match)
	// check valid prefix
	let s_prefix_id = @{match}[1] || '';

	// invalid prefix
	if(!this.prefixes.hasOwnProperty(s_prefix_id)) return this.defer.error(`no such prefix "${s_prefix_id}"`);
@end


@ // ensure there are no conflicting blank node labels
@macro no_label_conflict()
	// not first time use of label
	let z_label_state = this.labels[s_label];
	if(z_label_state) {
		// label was used previously by document and has no conflict
		if(1 === z_label_state) {}
		// label is in use by invention, this would cause a conflict
		else if(2 === z_label_state) {
			// so create a redirect mapping for this actual label & use it instead
			s_label = this.labels[s_label] = this.next_label();
		}
		// label already has a redirect mapping
		else {
			// use redirected label
			s_label = this.labels[s_label];
		}
	}
	// first time use of label
	else {
		// store label in hash so we avoid future collisions
		this.labels[s_label] = 1;
	}
@end


@ // 
@macro full_stop()
	if(this.defer.expect_full_stop) {
		// change state
		@{continue('full_stop')}
	}
@end




@ // creates a class for the given term type of an rdf object
@macro object_term_type(proper, casual, set, inherit)
	function @{proper}
		@if set
			(s_@{set}) {
				this.@{set} = s_@{set};
		@else
			() {
		@end
	}
	@if inherit
		@{proper}.prototype = Object.create(@{inherit}.prototype);
	@end
		@{proper}.prototype.is = Object.assign(function() {
			return '@{casual}';
		}, {
			@{casual}: true,
		});
@end


@ // create a class for each of the term types that the object of a triple can be
@macro term_types()
	@{object_term_type('Iri', 'iri', KEY_IRI)}
	@{object_term_type('Literal', 'literal', KEY_LITERAL_VALUE)}
	@{object_term_type('Blanknode', 'blanknode', KEY_BLANK_NODE_LABEL)}
@end


@macro this_defer_errors()
	// error event
	error: h_events.error || ((e_parse) => {
		throw `parse error: ${e_parse}`;
	}),

	// parse_error (not meant to be an event callback)
	parse_error: (s_expected) => {
		let i = this.i;
		let s = this.s;
		let i_off = Math.min(i, Math.abs(i-15));
		this.defer.error(`\n\`${s.substr(i_off, i_off+30).replace(/[\n\t]/g, ' ')}\`\n`
			+` ${' '.repeat(i-i_off)}^\n`
			+`expected ${s_expected}.  failed to parse a valid token starting at ${s[i]? '"'+s[i]+'"': '<EOF>'}`);
	},
@end


	// 	// stream
	// 	if(ds.on) {
	// 		// once stream closes, invoke eof
	// 		ds.on('end', eof);

	// 		// begin
	// 		ds.on('data', (s_in) => {
	// 			// concatenate current chunk to previous chunk
	// 			this.s = this.pre + s_in;

	// 			// cache chunk length
	// 			this.n = this.s.length;

	// 			// consume whitespace (and incidentally reset chunk index)
	// 			let s = this.s;
	// 			@{whitespace('0')}

	// 			// begin
	// 			this.resume();
	// 		});
	// 	}
	// 	// string
	// 	else if('string' === typeof ds) {
	// 		// concatenate previous chunk
	// 		this.s = ds;

	// 		// pausing means we've reached eof
	// 		this.pause = eof;

	// 		// compute chunk length
	// 		this.n = this.s.length;

	// 		// reset index
	// 		this.i = 0;

	// 		// consume whitespace
	// 		let s = this.s;
	// 		@{whitespace('0')}

	// 		// begin
	// 		this.resume();
	// 	}
	// }


@macro export_module()
	module.exports = function(ds, h_events) {
		new Parser(ds, h_events);
	};
@end
