/* eslint-env mocha */
/* eslint indent: 1 */
@import '../../../src/share/channel.jmacs'

const assert = require('assert');
const eq = assert.strictEqual;
const deq = assert.deepEqual;

const ttl_read = require('@{channel()}/content.ttl.read');
const ttl_write = require('@{channel()}/content.ttl.write');
const data_set = require('@{channel()}/api.data.set');

const ST_PREFIXES = /* syntax: turtle */ `
	@prefix : <> .
	@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
`;

const write = async(h_triples, st_verify) => {
	let k_set_expected = data_set();

	await ttl_read({input:ST_PREFIXES+st_verify})
		.pipe(k_set_expected)
		.until('finish');

	let k_set_actual = data_set(null, {debug:true});

	let k_writer = ttl_write({
		prefixes: {
			'': '',
		},
		indent: '    ',
		trailling: true,
	});

	// write triples and then end
	k_writer.add(h_triples);
	k_writer.end();

	// pipe to parser and actual
	await k_writer
		.pipe(ttl_read())
		.pipe(k_set_actual)
		.until('finish');

	// compare canonicalized forms
	eq(k_set_actual.canonicalize(), k_set_expected.canonicalize(), 'sets did not yield equivalent canonicalization');
};

const comment = () => ttl_write.comment({
	width: 100,
	border: {
		char: '*',
		top: 1,
		bottom: 1,
	},
	indent: '    ',
});

@> pairs(s_group='a', n_recursions=0)
	@*{
		let i_hi = 4;
		if(n_recursions >= 0) i_hi = 6;
		for(let i_p=0; i_p<i_hi; i_p++) {
			let s_comment = `i_p: ${i_p}, `;

			let s_terminal;
			// first object; string only
			if(!i_p) {
				s_terminal = `'>o${s_group}0'`;
			}
			else if(i_p < 4) {
				let a_insides = [];
				for(let i_inside=0; i_inside<i_p; i_inside++) {
					a_insides.push(`'>o${s_group}${i_inside}'`);
				}
				s_terminal = `[${a_insides.join(', ')}]`;
			}
			else if(i_p < 5) {
				s_comment += `/${String.fromCodePoint(s_group.codePointAt(0)+1)}, `;
				s_terminal = `{
					${pairs(String.fromCodePoint(s_group.codePointAt(0)+1), n_recursions-1)}
				}`;
			}
			else {
				s_terminal = `[
					'>on0',
					['>on1'],
					['>on2', '>on3'],
					['>on4', '>on5', '>on6'],
					{
						${pairs(String.fromCodePoint(s_group.codePointAt(0)+2), n_recursions-1)}
					}
				]`;
			}
			yield /* syntax: js */ `
				[comment()]: '${s_comment}',
				[comment()]: 'following comment',
				'>p${s_group}${i_p}': ${s_terminal},
			`.replace(/^\s+/, '');
		}
	}
@;

let h_tests = {
	basic: {
		'absolute IRIs': {
			write: {
				[comment()]: 'start at the top',
				'>s0': {
					@{pairs('a', 1)}
				},
			},
			expect: `
				:a :b :c .
			`,
		},

		'prefixed names': {
			write: {
				':a': {
					':b': [':c', ':-1'],
				},
			},
			expect: /* syntax: turtle */ `
				:a :b :c, <-1> ;
				.
			`,
		},

		'coercions': (dt_now => ({
			write: {
				':coerce': {
					':integer': 42,
					':decimal': 4.2,
					':dateTime': dt_now,
				},
			},
			expect: `
				:coerce :integer 42 ;
					:decimal 4.2 ;
					:dateTime "${dt_now.toISOString()}"^^xsd:dateTime ;
				.
			`,
		})(new Date())),
	},

	collections: {
		long: (a_items => ({{
			write: {
				':a': {
					':b': [a_items.map(s => `"${s}`)],
				},
			},
			expect: /* syntax: turtle */ `
				:a :b (${a_items.map(s => `"${s}" `)}) ;
				.
			`,
		})('abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split(''))),
	},
};

for(let s_describe in h_tests) {
	let h_cases = h_tests[s_describe];
	describe(s_describe, () => {
		for(let s_it in h_cases) {
			let g_test = h_cases[s_it];
			it(s_it, async() => await write(g_test.write, g_test.expect));
		}
	});
}
