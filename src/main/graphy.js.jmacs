@import '../share/channel.jmacs'

/* eslint-disable global-require */

const factory = require('@{channel('core.data.factory')}');

const memoize = (s_package) => {
	delete graphy[s_package];
	return graphy[s_package] = require('@{channel('')}/'+s_package);
};

@.{
	let g_rws = {
		read: {},
		write: {},
		scribe: {},
	};

	let h_content_types = {
		ttl: g_rws,
		trig: g_rws,
		nt: {
			...g_rws,
			scan: {},
		},
		nq: {
			...g_rws,
			scan: {},
		},
		xml: {
			scribe: {},
		},
	};
}

@> memoize(s_package, b_mono_prop=false)
	@- b_mono_prop
		return memoize('@{s_package}');
	@:
		@//@object-literal
		@//get @{s_package.replace(/^.*\.([^.]+)$/, '$1')}() {
			@//@
			// memoize
			delete graphy@{b_mono_prop? `['${s_package}']`: `.${s_package}`};
			return (graphy@{b_mono_prop? `['${s_package}']`: `.${s_package}`} = require('@{channel(s_package)}'));
		@//},
	@;
@;


@> content(s_content)
	// @{s_content} package
	const @{s_content} = {
		@*{
			for(let si_mode in h_content_types[s_content]) {
				yield /* syntax: js.object-literal */ `
					// ${si_mode} ${s_content}
					get ${si_mode}() {
						${memoize(`content.${s_content}.${si_mode}`)}
					},
				`;
			}
		}
	};
@;

@*{
	for(let s_content in h_content_types) {
		yield content(s_content);
	}
}



// // SPARQL Results package
// const sparql_results = {
// 	// deserialize sparql_results input
// 	get deserializer() {
// 		// memoize
// 		delete sparql_results.deserializer;
// 		return (sparql_results.deserializer = require('../sparql-results/deserializer.js'));
// 	},
// };


const H_CONTENT_MIMES = {
	'text/turtle': ttl,
	'application/trig': trig,
	'application/n-triples': nt,
	'application/n-quads': nq,
	'application/rdf+xml': xml,
	// 'application/sparql-results+json': sparql_results,
};

const H_CONTENT_TAGS = {
	nt,
	ntriples: nt,
	'n-triples': nt,
	nq,
	nquads: nq,
	'n-quads': nq,
	ttl,
	turtle: ttl,
	trig,
	xml,
	'rdf-xml': xml,
	'rdf/xml': xml,
	// 'sparql-results': sparql_results,
};



@>> R_TOKENS()
	@//@regex
	[^\0-\x20()<>@,;:\\"\/[\]?.=]+
@;

@//@
const R_CONTENT_TYPE = /^((?:application|text)\/@{R_TOKENS()})(;.+)*$/i;

const graphy = module.exports = Object.assign({

	VERSION: '4.1.0',

	content: Object.assign((s_query_in) => {
		let s_query = s_query_in.toLowerCase();

		if(s_query in H_CONTENT_TAGS) {
			return H_CONTENT_TAGS[s_query];
		}

		let m_content_type = R_CONTENT_TYPE.exec(s_query);
		if(!m_content_type) throw new Error(`invalid content-type string: "${s_query}"`);
		let [, s_content_type, s_parameters] = m_content_type;
		let s_content_type_normal = s_content_type.toLowerCase();

		if(s_content_type_normal in H_CONTENT_MIMES) {
			return H_CONTENT_MIMES[s_content_type_normal];
		}
		else {
			throw new Error(`no content handlers matched query for "${s_content_type_normal}"`);
		}
	}, {
		@*{
			for(let s_content in h_content_types) {
				yield /* syntax: js.object-literal */ `${s_content},\n`;
			}
		}
	}),

	core: {
		data: {
			get factory() {
				@{memoize('core.data.factory')}
			},
		},
		iso: {
			get stream() {
				@{memoize('core.iso.stream')}
			},
		},
	},

	get 'core.data.factory'() {
		@{memoize('core.data.factory', true)}
	},

	get 'core.iso.stream'() {
		@{memoize('core.iso.stream', true)}
	},

	util: {
		dataset: {
			get tree() {
				@{memoize('util.dataset.tree')}
			},
		},
	},

	get 'util.dataset.tree'() {
		@{memoize('util.dataset.tree', true)}
	},

	memory: {
		dataset: {
			get fast() {
				@{memoize('memory.dataset.fast')}
			},
		},
	},

	get 'memory.dataset.fast'() {
		@{memoize('memory.dataset.fast', true)}
	},


	@*{
		for(let s_content in h_content_types) {
			let h_modes = h_content_types[s_content];

			for(let si_mode in h_modes) {
				yield /* syntax: js.object-literal */ `
					get 'content.${s_content}.${si_mode}' () {
						${memoize(`content.${s_content}.${si_mode}`, true)}
					},
				`;
			}
		}
	}

@//@object-literal

}, factory);

@//@

// export graphy to window object if in main thread of browser
if('undefined' !== typeof window) window.graphy = graphy;
