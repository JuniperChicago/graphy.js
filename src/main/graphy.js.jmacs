#!/usr/bin/env node
@import '../share/channel.jmacs'

@.{
	let h_content_types = {
		ttl: {},
		trig: {},
		nt: {},
		nq: {},
	};
}

@> content(s_content)
	// @{s_content} package
	const @{s_content} = {
		// read @{s_content} output
		get read() {
			// memoize
			delete @{s_content}.read;
			return @{s_content}.read = require('@{channel(`content.${s_content}.read`)}');  // eslint-disable-line global-require
		},

		// turbo @{s_content} output
		get turbo() {
			// memoize
			delete @{s_content}.turbo;
			return @{s_content}.turbo = require('@{channel(`content.${s_content}.turbo`)}');  // eslint-disable-line global-require
		},

		// write @{s_content} input
		get write() {
			// memoize
			delete @{s_content}.write;
			return @{s_content}.write = require('@{channel(`content.${s_content}.write`)}');  // eslint-disable-line global-require
		},
	};
@;

@*{
	for(let s_content in h_content_types) {
		yield content(s_content);
	}
}


// // SPARQL Results package
// const sparql_results = {
// 	// deserialize sparql_results input
// 	get deserializer() {
// 		// memoize
// 		delete sparql_results.deserializer;
// 		return (sparql_results.deserializer = require('../sparql-results/deserializer.js'));
// 	},
// };


const H_CONTENT_MIMES = {
	'text/turtle': ttl,
	'application/trig': trig,
	'application/n-triples': nt,
	'application/n-quads': nq,
	// 'application/sparql-results+json': sparql_results,
};

const H_CONTENT_TAGS = {
	ttl,
	trig,
	nt,
	nq,
	// 'application/sparql-results+json': sparql_results,
};

const H_SPARQL_RESULT_TYPES = {
	uri: h => graphy.namedNode(h.value),
	iri: h => graphy.namedNode(h.value),
	bnode: h => graphy.blankNode(h.value),
	literal: (h) => {
		// language
		if('xml:lang' in h) {
			return graphy.literal(h.value, h['xml:lang']);
		}
		// datatype
		else if('datatype' in h) {
			return graphy.literal(h.value, graphy.namedNode(h.datatype));
		}
		// simple
		else {
			return graphy.literal(h.value);
		}
	},

	// old version of SPARQL results
	'typed-literal': h => graphy.literal(h.value, graphy.namedNode(h.datatype)),
};


@> memoize(s_package)
	@//@object-literal
	get @{s_package}() {
		// memoize
		delete graphy.@{s_package};
		return (graphy.@{s_package} = require('@{channel(s_package)}'));
	},
@;

@.{
	let h_standalones = {
		bat: {},
		set: {},
		viz: {},
		// store: {},
	};
}

@>> R_TOKENS()
	@//@regex
	[^\0-\x20()<>@,;:\\"\/[\]?.=]+
@;

const R_CONTENT_TYPE = /^((?:application|text)\/@{R_TOKENS()})(:;.+)$/;

const graphy = module.exports = Object.assign({

	/**
	* API:
	**/

	content: Object.assign(function(s_query) {
		let m_content_type = R_CONTENT_TYPE.exec(s_query);
		if(!m_content_type) throw new Error(`invalid content-type string: "${s_query}"`);
		let [, s_content_type, s_parameters] = m_content_type;
		let s_content_type_normal = s_content_type.toLowerCase();

		if(s_content_type_normal in H_CONTENT_TAGS) {
			return H_CONTENT_TAGS[s_content_type_normal];
		}
		else if(s_content_type_normal in H_CONTENT_MIMES) {
			return H_CONTENT_MIMES[s_content_type_normal];
		}
		else {
			throw new Error(`no content handlers matched query for "${s_content_type_normal}"`);
		}
	}, {
		@*{
			for(let s_content in h_content_types) {
				yield /* syntax: js */ `${s_content},\n`;
			}
		}
	}),

	// load triple data from arbitrary parser into memory
	get load() {
		// memoize
		delete graphy.load;
		return (graphy.load = require('./rdf-loader.js'));  // eslint-disable-line global-require
	},

	/**
	* content types:
	**/

	@*{
		for(let s_content in h_content_types) {
			yield `${s_content},\n`;
		}
	}
	// sparql_results,
	// sparqlResults: sparql_results,

	store: {
		memory: {
			get create() {
				delete graphy.store.memory.create;
				return (graphy.store.memory.create = require('@{channel('store.memory.create')}'));
			},
		},
	},

	@*{
		for(let s_package in h_standalones) {
			yield memoize(s_package)+'\n';
		}
	}

	fromSPARQLResult(h_term) {
		return H_SPARQL_RESULT_TYPES[h_term.type](h_term);
	},
@//@

}, require('@{channel('core.data.factory')}'));


// export graphy to window object if in main thread of browser
if('undefined' !== typeof window) window.graphy = graphy;

// cli
if(module === require.main) {
	const yargs = require('yargs');
	let g_args = yargs
		.command(...[
			'content.ttl.read',
			'read a Turtle document',
			(y_yarg) => y_yarg.options({
				pipe: {
					alias: 'p',
					describe: 'pipe output to another command',
				},
			}),
			(g_argv) => {
				console.log('ttl_read');
				debugger;
			},
		])
		.help()
		.argv;
}
