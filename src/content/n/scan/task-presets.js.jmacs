
module.exports = {
	count: gc_scan => ({
		reduce: (c_quads_a, c_quads_b) => c_quads_a + c_quads_b,

		map: /* syntax: js */ `
			(read, submit, update, err) => {
				let c_quads = 0;

				return read({
					relax: ${gc_scan.relax? 'true': 'false'},

					data() {
						c_quads += 1;
					},

					eof() {
						submit(c_quads);
					},
				});
			}
		`,
	}),

	tree: gc_scan => ({
		reduce: (k_tree_a, k_tree_b) => k_tree_a.union(k_tree_b),

		map: /* syntax: js */ `
			(read, submit, update, err) => {
				let k_tree = require('@graphy/memory.dataset.fast')();

				return read({
					relax: ${gc_scan.relax? 'true': 'false'},

					pipe: k_tree.on('finish', () => {

					}),

					data(g_quad) {
						k_tree.add(g_quad);
					},

					eof() {
						submit(k_tree.export());
					},
				});
			}
		`,

		// report(k_tree) {
		// 	console.log(k_tree.size);
		// },
	}),

	scribe: gc_scan => ({
		map: /* syntax: js */ `
			async(read, submit, update, err, user) => {
				let c_quads = 0;

				let ds_scriber = require('@graphy/content.ttl.scribe')({
					prefixes: user.prefixes,
				});

				// each data event on writer
				ds_scriber.on('data', (s_write) => {
					// convert to Buffer -> ArrayBuffer
					let ab_chunk = Buffer.from(s_write);
					let db_chunk = ab_chunk.buffer.slice(ab_chunk.byteOffset, ab_chunk.byteOffset+ab_chunk.byteLength);

					// send to master
					update(db_chunk, [db_chunk]);
				});

				ds_scriber.on('end', () => {
					submit();
				});

				let ds_reader = read({
					relax: ${gc_scan.relax? 'true': 'false'},
				});

				ds_reader.pipe(ds_scriber);

				return ds_reader;
			}
		`,

		// reduce: (ab_chunk_a, ab_chunk_a) => c_quads_a + c_quads_b,

		update(db_chunk) {
			debugger;
			this.push(Buffer.from(db_chunk).toString());
		},
	}),

	distinct: gc_scan => ({
		map: /* syntax: js */ `
			(read, submit) => {
				const dataset = require('@graphy/memory.dataset.fast');
				let k_dataset = dataset();

				k_dataset.on('finish', () => {
					report(k_dataset.export());
				});

				let ds_reader = read({
					relax: ${gc_scan.relax? 'true': 'false'},
				});

				ds_reader.pipe(k_dataset);

				return ds_reader;
			}
		`,

		reduce: (k_dataset_a, k_dataset_b) => k_dataset_a.union(k_dataset_b),
	}),
};
