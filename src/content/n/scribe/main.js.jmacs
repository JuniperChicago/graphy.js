@./* global FORMAT */
@//@

@import '../../../share/channel.jmacs'

@$ B_NT = 'nt' === FORMAT;
@$ B_NQ = 'nq' === FORMAT;
@$ B_QUADS = B_NQ;

@$ S_CONTENT_TYPE = B_NT? 'application/n-triples': 'application/n-quads';

@$ S_LABEL = B_NT? 'NTriples': 'NQuads';

const Scribable = require('@@@{S_GRAPHY_CHANNEL}/core.class.scribable');

const factory = require('@@@{S_GRAPHY_CHANNEL}/core.data.factory');
const {
	c1_to_nt,
	clean_iri,
} = factory;


function verbose_s(yt_subject) {
	if('NamedNode' === yt_subject.termType) {
		return '<'+clean_iri(yt_subject.value)+'>';
	}
	else {
		return '_:'+yt_subject.value;
	}
}


@- B_QUADS
	function verbose_g(yt_subject) {
		switch(yt_subject.termType) {
			// default graph
			case 'DefaultGraph': return '';

			// named node
			case 'NamedNode': return '<'+clean_iri(yt_subject.value)+'>';

			// blank node
			default: return '_:'+yt_subject.value;
		}
	}
@;


const verbose_p = yt_predicate => '<'+clean_iri(yt_predicate.value)+'>';

const P_IRI_XSD_STRING = 'http://www.w3.org/2001/XMLSchema#';
function verbose_o(yt_object) {
	switch(yt_object.termType) {
		// named node
		case 'NamedNode': return '<'+clean_iri(yt_object.value)+'>';

		// literal
		case 'Literal': {
			let s_contents = JSON.stringify(yt_object.value);

			if(yt_object.language) {
				return s_contents+'@'+yt_object.language;
			}
			else if(P_IRI_XSD_STRING === yt_object.datatype.value) {
				return s_contents;
			}
			else {
				return s_contents+'^^<'+clean_iri(yt_object.datatype.value)+'>';
			}
		}

		// blank node
		default: return '_:'+yt_object.value;
	}
}


class @{S_LABEL}_Scriber extends Scribable {
	constructor(gc_scriber={}) {
		super(gc_scriber);

		// prefixes given
		if(gc_scriber.prefixes) {
			// update prefixes
			this._update_prefixes(gc_scriber.prefixes);
		}
	}

	_serialize_c3r(hc3r_triples) {
		// ref prefixes
		let h_prefixes = this._h_prefixes;

		// string building
		let st_build = '';

		for(let sc1_subject in hc3r_triples) {
			// quick convert subject from concise term to terse
			let st1_subject = c1_to_nt(sc1_subject, h_prefixes, true);

			// not a term; skip
			if(!st1_subject) continue;

			// each predicate
			let hc2x_pairs = hc3r_triples[sc1_subject];
			for(let sc1_predicate in hc2x_pairs) {
				// quick convert predicate from concise term to terse
				let st1_predicate = c1_to_nt(sc1_predicate, h_prefixes, true);

				// not a term; skip
				if(!st1_predicate) continue;

				// opening string
				let st_opening = st1_subject+' '+st1_predicate+' ';

				// each object
				for(let sc1_object of hc2x_pairs[sc1_predicate]) {
					// quick convert object from concise term to terse
					let st1_object = c1_to_nt(sc1_object, h_prefixes, true);

					// not a term; skip
					if(!st1_object) continue;

					st_build += st_opening+st1_object+' .\n';
				}
			}
		}

		return st_build;
	}

	_serialize_quad(g_quad) {
		let {
			subject: yt_subject,
			predicate: yt_predicate,
			object: yt_object,
			@- B_QUADS
				graph: yt_graph,
			@;
		} = g_quad;

		// write @{B_QUADS? 'quad': 'triple'}
		this._s_push += verbose_s(yt_subject)
			+' '+verbose_p(yt_predicate)
			+' '+verbose_o(yt_object)
			@{B_QUADS
				? /* syntax: js */ `+' '+verbose_g(yt_graph)`
				: ''}
			+' .\n';
	}
};

Object.assign(@{S_LABEL}_Scriber.prototype, {
	_serialize_comment: Scribable.prototype._serialize_hash_comment,
});

module.exports = function(g_config) {
	return new @{S_LABEL}_Scriber(g_config);
};
