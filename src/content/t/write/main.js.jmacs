@./* global FORMAT */

@//@
@import '../../../share/channel.jmacs'
@import '../../../share/writer.jmacs'

const writable = require('@{channel('api.class.writable')}');

@$ QUADS = ('trig' === FORMAT);

class serializer extends writable.serializer.n3.terse {
	constructor(g_config) {
		super(writable.triples, g_config);
		
		let s_indent = g_config.indent || '\t';

		Object.assign(this, {
			new_graph: true,
			new_subject: true,
			new_predicate: true,

			blank_node_nesting: true,
			nest_mask: 0,
			nest_level: 0,

			// open a nested (anonymous) blank node
			nest_open(s_char='[') {
				return `${s_char}\n@{QUADS? '${s_indent}':''}`+s_indent.repeat(++this.nest_level+1);
			},

			// close a nest
			nest_close(s_char=']') {
				// reset nest tracker
				this.nest_mask = this.nest_mask & ~(1 << this.nest_level-1);

				// this.nest_level -= 1;
				return `${this.trailing? ' ;': ''}\n@{QUADS? '${s_indent}':''}`+s_indent.repeat(this.nest_level--)+s_char;
			},

			// indent spacing
			indent: s_indent,

			// trailing semi-colons
			trailing: g_config.trailing || false,
		});

		// open prefixes
		this.serialize_prefixes();
	}

	// create comment
	comment(s_comment, g_config={}, xm_mode=0) {
		let s_write = '';

		let b_newp = this.new_predicate;

		// debugger;
		if(xm_mode & @{XM_MODE_SUBJECT}) {
			if(!b_newp) {
				s_write += ` ;\n${this.indent.repeat(this.nest_level+1)}`;
				b_newp = !b_newp;
			}
			else if(this.nest_mask && this.nest_mask >= this.nest_level) {
				s_write += ` ;\n${this.indent.repeat(this.nest_level+1)}`;
				this.nest_mask = 0;
			}
			// this.nest_mask = 0;
		}

		for(let s_line of s_comment.split(/\n/g)) {
			s_write += `# mode:${xm_mode}, nest:${this.nest_level}, nm:${this.nest_mask}, ns:${this.new_subject}, np:${b_newp}, ${s_line}\n`;
		}

		// return to correct column
		if(this.nest_level) {
			s_write += this.indent.repeat(this.nest_level+1);
		}
		else if(xm_mode & @{XM_MODE_SUBJECT}) {
			s_write += this.indent;
		}

		this.new_predicate = b_newp;
		return s_write;
	}

	newlines(n_newlines=1, xm_mode=0) {
		return '\n'.repeat(n_newlines);
	}

	serialize_pair(s_predicate, s_object, xm_mode=0) {
		// same predicate
		if(xm_mode & @{XM_MODE_PREDICATE}) {
			return `, ${s_object}`;
		}
		// new/change of predicate
		else {
			// nested
			if(this.nest_level) {
				let s_open = '';
// debugger;
				// reuse ?
				if((this.nest_mask >>> (this.nest_level-1)) & 1) {
					s_open = ` ;\n${this.indent}${this.indent.repeat(this.nest_level)}`;
				}

				// s_open += `${this.indent}${this.indent.repeat(this.nest_level)}`;

				this.nest_mask = this.nest_mask | (1 << (this.nest_level-1));

				return `${s_open}${s_predicate} ${s_object}`;
			}
			// top scope
			else {
				let s_open = '';

				if(!this.new_predicate) {
					s_open += ` ;\n${this.indent}`;
				}

				this.new_predicate = false;
				this.nest_mask = 0;

				return `${s_open}${s_predicate} ${s_object}`;
			}
		}
	}

	serialize_object(k_leaf, s_object, xm_mode) {
		let s_write = '';

		@- QUADS
			// same graph
			if(xm_mode & @{XM_MODE_GRAPH}) {
		@;

			// same subject
			if(xm_mode & @{XM_MODE_SUBJECT}) {
				// same predicate
				if(xm_mode & @{XM_MODE_PREDICATE}) {
					return `, ${s_object}`;
				}
				// new/change of predicate
				else {
					return this.serialize_pair(k_leaf.term, s_object);
				}
			}
			// change of subject
			else {
				this.new_predicate = true;
				if(!this.new_subject) {
					if(this.trailing) {
						s_write += ' ;\n'+this.indent;
					}
					s_write += ' .\n\n';
				}

				// write subject
				s_write += `@{QUADS? '${this.indent}':''}${k_leaf.parent.term} `;

				// write predicate and object
				s_write += this.serialize_pair(k_leaf.term, s_object);

				this.new_subject = false;

				return s_write;
			}

		@- QUADS
			}
			// new/change of graph
			else {
				let k_parent = k_leaf.parent;
				this.new_predicate = true;
				let s_new_graph = `${k_parent.parent.term}\n{\n\t${k_parent.term}\n`;

				// change graph
				if(this.count) {
					s_write += `\n}\n\n${s_new_graph}`;
				}
				// new graph
				else {
					s_write += s_new_graph;
				}

				// add rest
				s_write += this.serialize_pair(k_leaf.term, s_object)

				this.new_graph = false;
				this.new_subject = true;

				return s_write;
			}
		@;
	}

	serialize_collection(a_collection) {
		let s_indent = this.indent;
		let n_indent = ++this.nest_level;
		return `(${
			a_collection
				.map(s => `\n@{QUADS? '${s_indent}':''}${
					s_indent.repeat(n_indent)
				}${
					this.nested_collection_item(s)
				}`).join('')
		}\n@{QUADS? '${s_indent}':''}${s_indent.repeat(--this.nest_level)})`;
	}

	serialize_collection_object(k_leaf, a_collection, xm_mode) {
		let s_object = this.serialize_collection(a_collection);
		return this.serialize_object(k_leaf, s_object, xm_mode);
	}

	close() {
		// close previous statement
		if(!this.new_subject) {
			this.write((this.trailing? ' ;\n'+this.indent: '')+' .\n');
		}

		this.end();
	}
};

module.exports = function(g_config) {
	return (new serializer(g_config)).writer;
};
