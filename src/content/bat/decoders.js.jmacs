@import './constants.jmacs'

const bkit = require('bkit');

/* eslint-disable global-require */
class decoders {
	constructor(h_decoders=null) {
		// no decoder map given
		if(!h_decoders) {
			// default to builtins
			h_decoders = {
				'@{H_BAT_ENCODINGS.PE_DATASET_DQ}': require('./dataset.js'),
				'@{H_BAT_ENCODINGS.PE_DATASET_DICTIONARY_PP12OC}': require('./dictionary-pp12oc.js'),
				'@{H_BAT_ENCODINGS.PE_DATASET_DICTIONARY_CHAPTER_DIFCC}': require('./chapter-difcc.js'),
				'@{H_BAT_ENCODINGS.PE_DATASET_QUADS_TRIPLES_RL}': require('./triples-roots-leafs.js'),
				'@{H_BAT_ENCODINGS.PE_DATASET_QUADS_TRIPLES_BITMAP_AB}': require('./triples-bitmap-ab.js'),
				'@{H_BAT_ENCODINGS.PE_DATASET_QUADS_INDEX_ADJACENCY_LIST}': require('./index-adjacency.js'),
			};
		}

		Object.assign(this, {
			decoders: h_decoders,
		});
	}

	auto(kbd) {
		let a_decode = this.auto_what(kbd);

		if(a_decode) return a_decode[0];
		return null;
	}

	auto_what(kbd) {
		// no container could fit in less than 4 bytes
		if(kbd.read > kbd.contents.length - 4) return null;

		// container encoding URI
		let pe_payload = kbd.ntu8_string();

		// payload size in bytes
		let n_payload_bytes = kbd.vuint();

		// payload
		let at_payload = kbd.grab(n_payload_bytes);

		// find decoder by URI
		let h_decoders = this.decoders;
		if(!(pe_payload in h_decoders)) {
			throw new Error(`no decoder for ${pe_payload}`);
		}

		// create buffer decoder on payload
		let kbd_child = new bkit.buffer_decoder(at_payload);

		// instantiate decoder
		return [new h_decoders[pe_payload](kbd_child, this), pe_payload];
	}
}


module.exports = decoders;
