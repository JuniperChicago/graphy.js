
@>> R_COMPRESS()
	@//@regex
	^(.*?)([^/#]*)$
@;


@$ XM_NODE_SUBJECT   = 1 << 0;
@$ XM_NODE_OBJECT	   = 1 << 1;
@$ XM_NODE_PREDICATE	= 1 << 2;
@$ XM_NODE_DATATYPE	= 1 << 3;

@$ XM_NODE_HOP = XM_NODE_SUBJECT | XM_NODE_OBJECT;


@$ X_TOKEN_ABSOLUTE_IRI = 0x01;
@$ X_TOKEN_BLANK_NODE = 0x02;
@$ X_TOKEN_PREFIX_FOLLOWS = 0x03;


@$ P_IRI_BAT_ENCODING = 'http://bat-rdf.link/encoding/1.0/';

@$ H_BAT_ENCODINGS = [
		'dataset:dq',
			'dataset.dictionary:pp12oc',
				'dataset.dictionary.chapter:difcc',
			'dataset.quads:t3i',  // bitmap, wavelet, adajacency list, matrix  (s, p, o, g)
				'dataset.quads.triples:rl',
					'dataset.quads.triples.bitmap:ab',
						'dataset.quads.triples.bitmap.bitsequence:plain',
				'dataset.quads.index:wavelet-tree',
				'dataset.quads.index:adjacency-list',
				'dataset.quads.index:membership-matrix',
	].reduce((h, s) => Object.assign(h, {
		['PE_'+s.replace(/[^a-zA-Z0-9]/g, '_').toUpperCase()]: `${P_IRI_BAT_ENCODING}${s}`,
	}), {});


@> TERM_KEYS()
	const S_PREFIXES = 'prefixes';
	const S_TERM_HA = 'hops_absolute';
	const S_TERM_SA = 'subjects_absolute';
	const S_TERM_PA = 'predicates_absolute';
	const S_TERM_OA = 'objects_absolute';
	const S_TERM_HP = 'hops_prefixed';
	const S_TERM_SP = 'subjects_prefixed';
	const S_TERM_PP = 'predicates_prefixed';
	const S_TERM_OP = 'objects_prefixed';
	const S_TERM_LP = 'literals_plain';
	const S_TERM_LL = 'literals_languaged';
	const S_TERM_LDA = 'literals_datatyped_absolute';
	const S_TERM_LDP = 'literals_datatyped_prefixed';
@;
