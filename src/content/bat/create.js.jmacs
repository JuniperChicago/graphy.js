@import './constants.jmacs'
@import '../../share/channel.jmacs'

const stream = require('@{channel('core.iso.stream')}');
const primer = require('@{channel('content.bat.primer')}');
const serializer = require('@{channel('content.bat.serializer')}');

function self$ready(k_self, at_serialized=null) {
	if(k_self._ready) {
		k_self.push(at_serialized);
		k_self.push(null);
	}
	else {
		k_self._serialized = at_serialized;
	}
}

class creator extends stream.Duplex {
	constructor(g_config={}) {
		super({
			writableObjectMode: true,
			readableObjectMode: false,
		});

		let k_primer = new primer();

		Object.assign(this, {
			primer: k_primer,
			_serialized: null,
			_ready: true,
		});

		this.on('finish', async() => {
			let k_serializer = new serializer(k_primer);

			let at_serialized = await k_serializer.buffer();

			self$ready(this, at_serialized);
		});
	}

	_write(g_quad, s_encoding, fk_write) {
		this.primer.save_triple(g_quad);
		fk_write();
	}

	_writev(a_quads, fk_write) {
		let k_primer = this.primer;
		for(let g_quad of a_quads) {
			k_primer.save_triple(g_quad);
		}

		fk_write();
	}

	_read() {
		this._ready = true;

		if(null !== this._serialized) {
			let at_serialized = this._serialized;
			self$ready(this, at_serialized);
			this._serialized = null;
		}
	}
}

module.exports = function create(...a_args) {
	return new creator(...a_args);
};
