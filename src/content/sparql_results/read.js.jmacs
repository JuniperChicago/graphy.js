@import '../../share/channel.jmacs'
@import '../../share/iris.jmacs'

@import '../common.parse.textual.jmacs'
@./* global FORMAT */
@//@

const stream = require('@@@{S_GRAPHY_CHANNEL}/api.iso.stream');
const factory = require('@@@{S_GRAPHY_CHANNEL}/api.data.factory');

class reader {
	constructor(gc_read={}) {
		// impl-specific configs
		let {
			// input medium
			input: g_input=null,
		} = gc_read;

		// save fields
		Object.assign(this, {

		});

		// JSON string
		if(g_input.string) {
			throw new Error(`content.sparql_results.read: JSON input string not yet implemented`);
		}
		// stream
		else if(g_input.stream) {
			throw new Error(`content.sparql_results.read: input stream not yet implemented`);
		}
		// object
		else if(g_input.object) {
			let g_results = g_input.object;

			// invalid object
			if(!Array.isArray(g_results.bindings)) {
				throw new TypeError(`content.sparql_results.read: expected input object to have an Array value under the '.bindings' property`);
			}

			// ref bindings
			let a_bindings = g_results.bindings;

			// create readable output
			let ds_output = this.output = new stream.Readable({
				// outputs quad objets
				objectMode: true,

				// once data event is attached
				read: () => {
					// each row in bindings array
					for(let h_row of a_bindings) {
						// transform into hash of graphy terms
						let h_row_terms = {};

						// each property in row
						for(let s_key in h_row) {
							h_row_terms[s_key] = factory.from_sparql_result(h_row[s_key]);
						}

						// push row to output
						ds_output.push(h_row);
					}

					// end
					ds_output.emit('end');

					// remove this handler
					ds_output._read = () => {};
				},
			});

			// bind events to output stream
			this.bind(gc_read);

			// ready to parse
			ds_output.emit('ready');
		}
	}


	// bind event listeners to output stream
	bind(gc_read) {
		let ds_output = this.output;
		if(gc_read.error) ds_output.on('error', gc_read.error);
		if(gc_read.read) ds_output.once('read', gc_read.read);
		if(gc_read.end) ds_output.once('end', gc_read.end);
		if(gc_read.data) ds_output.on('data', gc_read.data);
	}

}

module.exports = function read_sparql_results_json(...a_args) {
	let g_config = {};

	@{normalize_reader_config('g_config')}

	// create reader, return output
	return (new reader(g_config)).output;
};
