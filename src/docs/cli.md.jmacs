@import './docs.jmacs'
@.{
  const factory = require(`@${process.env.GRAPHY_CHANNEL || 'graphy'}/core.data.factory`);
  const h_prefixes = {xsd:'http://www.w3.org/2001/XMLSchema#', dbr:'http://dbpedia.org/resource/'};
}
# [Â« Home](https://graphy.link/) / Command Line Interface
This document describes the command-line interface for the binary `graphy` available from npm.

### `npm i -g graphy`

<br />
## Internal Pipeline
The `graphy` CLI works by pushing RDF data through a series of [internal transforms](#commands), starting with a single input on `stdin` (or instead, [multiple inputs](#inputs)) and ending with a single output on `stdout`. This internal pipeline feature allows for efficient, high-bandwidth transformation of RDF data.


### `Usage: graphy COMMAND [--pipe COMMAND]*`

<br />

## Commands
@.{/*
 - `content TYPE VERB [OPTIONS]`
   - select a content handler command by its content-type and verb.
   - **Type:** `-t, --type`
     - argument to [super.content()](super#function_content).
   - **Verb:** `-v, --verb`
     - which verb to access on the given content handler, e.g., `read`, `write`, etc.
   - *examples:*
     ```bash
     $ graphy content --type=text/turtle --verb=read < input.ttl

     $ graphy content -t application/n-triples -v read < input.nt
     ```
*/}

<a name="command_content-format-read" />

 - `content.FORMAT.read [OPTIONS]`
   - `N-to-N<`[`StringStream`](#class_string-stream)`, `[`QuadStream`](#class_quad-stream)`>` -- maps 1 or more utf8-encoded input streams into 1 or more object output streams of RDF [Quad](core.data.factory#class_quad) objects.
   - **Format:**
     - `nt` -- read N-Triples document(s)
     - `nq` -- read N-Quads document(s)
     - `ttl` -- read Turtle document(s)
     - `trig` -- read TriG document(s)
   - **Options:**
     - `-b, --base, --base-uri` -- sets the starting base URI for the RDF document, [see more here](content.textual#config_read-no-input).
     - `-v, --validate` -- whether or not to perform validation on tokens, [see more here](content.textual#config_read-no-input).
   - _examples:_
     ```bash
     # validate an N-Triples document
     $ graphy content.nt.read --validate < input.nt > /dev/null

     # print line-delimited JSON of quads in N-Quads document
     $ graphy content.nq.read < input.nq

     # validate a Turtle document
     $ graphy content.ttl.read -v < input.ttl > /dev/null

     # print line-delimited JSON of quads in TriG document while validating it
     $ graphy content.trig.read -v < input.trig
     ```

<a name="command_content-format-write" />

 - `content.FORMAT.write [OPTIONS]`
   - `N-to-1<`[`WritableDataEventStream`](#class_writable-data-event-stream)`, `[`StringStream`](#class_string-stream)`>` -- maps 1 or more object input streams of [WritableDataEvent](content.textual#interface_writable-data-event) objects into 1 utf8-encoded output stream.
   - **Format:**
     - `nt` -- write an N-Triples document
     - `nq` -- write an N-Quads document
     - `ttl` -- write a Turtle document
     - `trig` -- write a TriG document
   - **Options:**
     - _none_
   - _examples:_
     ```bash
     # convert a Turtle document into N-Triples
     $ cat input.ttl | graphy content.ttl.read \
         --pipe content.nt.write > output.nt

     # convert a TriG document into N-Quads
     $ cat input.trig | graphy content.trig.read \
         --pipe content.nq.write > output.nq

     # convert an N-Triples document into Turtle
     $ cat input.nt | graphy content.nt.read \
         --pipe content.ttl.write > output.ttl

     # convert an N-Quads document into TriG
     $ cat input.nq | graphy content.nq.read \
         --pipe content.trig.write > output.trig
     ```

<a name="command_util-dataset-tree" />

 - `util.dataset.tree [OPTIONS] [COMMAND]`
   - use the [DatasetTree](util.dataset.tree) package to perform set algebra or to remove duplicates from a single data source.
   - **Commands:**
     - ` ` -- _(no command)_
       - `N-to-N<`[`QuadStream`](#class_quad-stream)`, `[`AnyDestination`](#class_any-destination)`>` -- maps 1 or more object input streams of [Quad](core.data.factory#class_quad) objects into 1 or more object output streams of [Quad](core.data.factory#class_quad) objects, or [WritableDataEvent](content.textual#interface_writable-data-event) objects, depending on the capabilities of the destination stream(s).
       - This transformation puts each dataset into its own tree, effectively removing duplicate quads and organizing quads into a tree of `graph --> subject --> predicate --> object`. [See example](#example_pretty-print).
     - `-c, --canonicalize`
       - `N-to-N<`[`QuadStream`](#class_quad-stream)`, `[`AnyDestination`](#class_any-destination)`>` -- maps 1 or more object input streams of [Quad](core.data.factory#class_quad) objects into 1 or more object output streams of [Quad](core.data.factory#class_quad) objects, or [WritableDataEvent](content.textual#interface_writable-data-event) objects, depending on the capabilities of the destination stream(s).
       - This transformation puts each dataset into its own tree, effectively removing duplicate quads and organizing quads into a tree of `graph --> subject --> predicate --> object`. [See example](#example_pretty-print).
       - _example:_
         ```bash
         # compute the isomorphic difference between two files
         $ graphy content.ttl.read \
             --pipe util.dataset.tree --canonicalize \  # first canonicalize each input
             --pipe util.dataset.tree --difference \  # then compute their difference
             --pipe content.ttl.write \
             --inputs a.ttl b.ttl \
             > canonical-difference.ttl
         ```
     - `-u, --union`
       - `N-to-1<`[`QuadStream`](#class_quad-stream)`, `[`AnyDestination`](#class_any-destination)`>` -- accepts 1 or more object input streams of [Quad](core.data.factory#class_quad) objects, performs the union of all datasets, and then pipes the result into 1 object output stream of [Quad](core.data.factory#class_quad) objects, or [WritableDataEvent](content.textual#interface_writable-data-event) objects, depending on the capabilities of the destination stream.
       - Performs the union of all inputs.
       - _example:_
         ```bash
         # perform a union on all *.ttl files inside `data/` directory
         $ graphy content.ttl.read \
             --pipe util.dataset.tree --union \
             --pipe content.ttl.write \
             --inputs input/*.ttl \
             > union.ttl
         ```
     - `-i, --intersection`
       - `N-to-1<`[`QuadStream`](#class_quad-stream)`, `[`AnyDestination`](#class_any-destination)`>` -- accepts 1 or more object input streams of [Quad](core.data.factory#class_quad) objects, performs the intersection of all datasets, and then pipes the result into 1 object output stream of [Quad](core.data.factory#class_quad) objects, or [WritableDataEvent](content.textual#interface_writable-data-event) objects, depending on the capabilities of the destination stream.
       - Performs the intersection of all inputs.
       - _example:_
         ```bash
         # perform an intersection on all *.ttl files inside `data/` directory
         $ graphy content.ttl.read \
             --pipe util.dataset.tree --intersection \
             --pipe content.ttl.write \
             --inputs input/*.ttl \
             > intersection.ttl
         ```
     - `-m, --minus, --subtraction`
       - `2-to-1<`[`QuadStream`](#class_quad-stream)`, `[`AnyDestination`](#class_any-destination)`>` -- accepts exactly 2 input streams of [Quad](core.data.factory#class_quad) objects, performs the subtraction of the second input from the first, and then pipes the result into 1 object output stream of [Quad](core.data.factory#class_quad) objects, or [WritableDataEvent](content.textual#interface_writable-data-event) objects, depending on the capabilities of the destination stream.
       - Subtracts the second input from the first.
       - _example:_
         ```bash
         # perform an intersection on all *.ttl files inside `data/` directory
         $ graphy content.ttl.read \
             --pipe util.dataset.tree --minus \
             --pipe content.ttl.write \
             --inputs union.ttl input/dead.ttl \
             > leftover.ttl
         ```
     - `-d, --diff, --difference`
       - `2-to-1<`[`QuadStream`](#class_quad-stream)`, `[`AnyDestination`](#class_any-destination)`>` -- accepts exactly 2 input streams of [Quad](core.data.factory#class_quad) objects, computes the difference between the two inputs, and then pipes the result into 1 object output stream of [Quad](core.data.factory#class_quad) objects, or [WritableDataEvent](content.textual#interface_writable-data-event) objects, depending on the capabilities of the destination stream.
       - Computes the difference between the two inputs.
       - _example:_
         ```bash
         # compute the difference between `original.ttl` and `modified.ttl`
         $ graphy content.ttl.read \
             --pipe util.dataset.tree --difference \
             --pipe content.ttl.write \
             --inputs original.ttl modified.ttl \
             > difference.ttl
         ```

## Inputs
By default, `graphy` expects a single input stream on `stdin`, which it will forward through the internal pipeline. Some commands may allow for or even expect multiple inputs (e.g., for computing the difference between two datasets).

### `--inputs FILE ...`
If you are simply piping in multiple input files, you can use the `--inputs` options like so:
```bash
$ graphy content.ttl.read \
    --pipe util.dataset.tree --difference \
    --pipe content.ttl.write \
    --inputs original.ttl modified.ttl \
	  > difference.ttl
```

Keep in mind that each command has its own restrictions on the number of inputs it accepts, which may also depend on the operation being performed (e.g., `util.dataset.tree --diff` accepts exactly 2 input streams while `util.dataset.tree --union` accepts 1 or more).


### Process Substitution
If you need to execute other commands before passing in multiple inputs, you can use [process substitution](http://www.tldp.org/LDP/abs/html/process-sub.html) (supported in bash) like so:
```bash
$ DBPEDIA_EN_URL="http://downloads.dbpedia.org/2016-10/core-i18n/en"
$ graphy content.ttl.read \
    --pipe util.dataset.tree --union \
    --pipe content.ttl.write \
    --inputs \
      <(curl "$DBPEDIA_EN_URL/topical_concepts_en.ttl.bz2" | bzip2 -d) \
      <(curl "$DBPEDIA_EN_URL/uri_same_as_iri_en.ttl.bz2" | bzip2 -d) \
    > union.ttl
```

<br />

<a name="classes" />

## Classes

<a name="class_string-stream" />

### class **StringStream**
A stream of utf8-encoded strings. This always applies to `stdin` and `stdout`.


<a name="class_quad-stream" />

### class **QuadStream**
A stream of [Quad](core.data.factory#class_quad) objects.


<a name="class_writable-data-event-stream" />

### class **WritableDataEventStream**
A stream of [WritableDataEvent](content.textual#interface_writable-data-event) objects.


<a name="class_any-destination" />

### class **AnyDestination**
Automatically determines which mode is best suited for the destination stream. Compatible with [QuadStream](#class_quad-stream), [WritableDataEventStream](#class_writable-data-event-stream) and [StringStream](#class_string-stream). In the case of StringStream, each object is converted to its JSON equivalent on a single line, followed by a newline `'\n'` (i.e., [Line-delimited JSON](https://en.wikipedia.org/wiki/JSON_streaming#Line-delimited_JSON)). 


<br />

<a name="examples /">

## Examples

<a name="example_pretty-print" />

### Pretty-print an RDF document
Piping RDF data through the DatasetTree transform organizes quads into a hierarchy by graph, subject, predicate and object. Piping this result to a writer format that uses a tree-like syntax (such as Turtle or TriG) has the effect of pretty-printing an otherwise "ugly" document.

```bash
$ curl http://dbpedia.org/data/Red_banana.ttl \
    | graphy content.ttl.read \
        --pipe util.dataset.tree \
        --pipe content.ttl.write \
        > pretty.ttl
```


#### Turns this:

```turtle
@prefix dbo:  <http://dbpedia.org/ontology/> .
@prefix dbr:  <http://dbpedia.org/resource/> .
dbr:FHIA-01 dbo:wikiPageRedirects dbr:Goldfinger_banana .
dbr:Musa_goldfinger dbo:wikiPageRedirects dbr:Goldfinger_banana .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix wikipedia-en: <http://en.wikipedia.org/wiki/> .
wikipedia-en:Goldfinger_banana  foaf:primaryTopic dbr:Goldfinger_banana .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix yago: <http://dbpedia.org/class/yago/> .
dbr:Goldfinger_banana rdf:type  yago:Whole100003553 ,
    yago:Abstraction100002137 .
@prefix owl:  <http://www.w3.org/2002/07/owl#> .
dbr:Goldfinger_banana rdf:type  owl:Thing ,
    yago:LivingThing100004258 ,
    yago:VascularPlant113083586 ,
    yago:Plant100017222 ,
    dbo:Plant ,
    dbo:Species ,
    yago:Object100002684 .
@prefix wikidata: <http://www.wikidata.org/entity/> .
dbr:Goldfinger_banana rdf:type  wikidata:Q756 ,
    yago:PhysicalEntity100001930 ,
    wikidata:Q19088 ,
    yago:Variety108101085 ,
    yago:TaxonomicGroup107992450 ,
    wikidata:Q4886 ,
    yago:BiologicalGroup107941170 ,
    yago:Cultivar113084834 ,
    yago:WikicatBananaCultivars ,
    dbo:Eukaryote ,
    dbo:CultivatedVariety ,
    yago:Group100031264 ,
    yago:Organism100004475 .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
dbr:Goldfinger_banana rdfs:label  "FHIA-1"@it ,
    "Goldfinger banana"@en ;
  rdfs:comment  "La FHIA-01 nota anche come Goldfinger \u00E8 una cultivar di banana sviluppata dalla Fundaci\u00F3n Hondure\u00F1a de Investigaci\u00F3n Agr\u00EDcola nel 1988. Questa banana si distingue per il suo netto sapore di mela, grande produttivit\u00E0 e la notevole resistenza ai patogeni."@it ,
    "The Goldfinger banana (FHIA-01) is a banana cultivar developed in Honduras. The cultivar, developed at the Honduran Foundation for Agricultural Research (FHIA) by a team of scientists led by Phillip Rowe and Franklin Rosales, has been bred to be pest-resistant (specifically against the black sigatoka) and crop-yielding."@en ;
  owl:sameAs  <http://rdf.freebase.com/ns/m.026ytv3> .
@prefix dbpedia-wikidata: <http://wikidata.dbpedia.org/resource/> .
dbr:Goldfinger_banana owl:sameAs  dbpedia-wikidata:Q5580155 ,
    wikidata:Q5580155 .
@prefix yago-res: <http://yago-knowledge.org/resource/> .
dbr:Goldfinger_banana owl:sameAs  yago-res:Goldfinger_banana ,
    dbr:Goldfinger_banana .
@prefix dbpedia-it: <http://it.dbpedia.org/resource/> .
dbr:Goldfinger_banana owl:sameAs  dbpedia-it:FHIA-1 .
@prefix dct:  <http://purl.org/dc/terms/> .
@prefix dbc:  <http://dbpedia.org/resource/Category:> .
dbr:Goldfinger_banana dct:subject dbc:Banana_cultivars ;
  foaf:name "Musa 'FHIA-01 Goldfinger'"@en ;
  foaf:isPrimaryTopicOf wikipedia-en:Goldfinger_banana .
@prefix prov: <http://www.w3.org/ns/prov#> .
dbr:Goldfinger_banana prov:wasDerivedFrom <http://en.wikipedia.org/wiki/Goldfinger_banana?oldid=646170541> .
@prefix dbp:  <http://dbpedia.org/property/> .
dbr:Goldfinger_banana dbp:group dbr:Banana ;
  dbo:origin  dbr:Honduras ;
  dbo:wikiPageExternalLink  <http://www.fhia.org.hn/dowloads/info_hibridos/fhia01.pdf> ,
    <http://www.promusa.org/tiki-index.php?page=FHIA-01> ,
    <http://archive.idrc.ca/books/reports/V221/banana.html> ;
  dbo:abstract  "The Goldfinger banana (FHIA-01) is a banana cultivar developed in Honduras. The cultivar, developed at the Honduran Foundation for Agricultural Research (FHIA) by a team of scientists led by Phillip Rowe and Franklin Rosales, has been bred to be pest-resistant (specifically against the black sigatoka) and crop-yielding."@en ,
    "La FHIA-01 nota anche come Goldfinger \u00E8 una cultivar di banana sviluppata dalla Fundaci\u00F3n Hondure\u00F1a de Investigaci\u00F3n Agr\u00EDcola nel 1988. Questa banana si distingue per il suo netto sapore di mela, grande produttivit\u00E0 e la notevole resistenza ai patogeni."@it ;
  dbo:wikiPageRevisionID  646170541 ;
  dbo:wikiPageID  8279730 ;
  dbo:hybrid  dbr:Musa_balbisiana ,
    dbr:Musa_acuminata ,
    dbr:Banana ;
  dbp:cultivar  "'FHIA-01 Goldfinger'"^^rdf:langString .
@prefix ns16: <http://purl.org/linguistics/gold/> .
dbr:Goldfinger_banana ns16:hypernym dbr:Cultivar ;
  dbp:imageWidth  250 .
dbr:Goldfinger  dbo:wikiPageDisambiguates dbr:Goldfinger_banana .
```


#### Into this:

```turtle
@prefix dbo: <http://dbpedia.org/ontology/> .
@prefix dbr: <http://dbpedia.org/resource/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix wikipedia-en: <http://en.wikipedia.org/wiki/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix yago: <http://dbpedia.org/class/yago/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix wikidata: <http://www.wikidata.org/entity/> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dbpedia-wikidata: <http://wikidata.dbpedia.org/resource/> .
@prefix yago-res: <http://yago-knowledge.org/resource/> .
@prefix dbpedia-it: <http://it.dbpedia.org/resource/> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix dbc: <http://dbpedia.org/resource/Category:> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix dbp: <http://dbpedia.org/property/> .
@prefix ns16: <http://purl.org/linguistics/gold/> .

dbr:FHIA-01 dbo:wikiPageRedirects dbr:Goldfinger_banana .

dbr:Musa_goldfinger dbo:wikiPageRedirects dbr:Goldfinger_banana .

wikipedia-en:Goldfinger_banana foaf:primaryTopic dbr:Goldfinger_banana .

dbr:Goldfinger_banana rdf:type yago:Whole100003553, yago:Abstraction100002137, owl:Thing, yago:LivingThing100004258, yago:VascularPlant113083586, yago:Plant100017222, dbo:Plant, dbo:Species, yago:Object100002684, wikidata:Q756, yago:PhysicalEntity100001930, wikidata:Q19088, yago:Variety108101085, yago:TaxonomicGroup107992450, wikidata:Q4886, yago:BiologicalGroup107941170, yago:Cultivar113084834, yago:WikicatBananaCultivars, dbo:Eukaryote, dbo:CultivatedVariety, yago:Group100031264, yago:Organism100004475 ;
  rdfs:label "FHIA-1"@it, "Goldfinger banana"@en ;
  rdfs:comment "La FHIA-01 nota anche come Goldfinger Ã¨ una cultivar di banana sviluppata dalla FundaciÃ³n HondureÃ±a de InvestigaciÃ³n AgrÃ­cola nel 1988. Questa banana si distingue per il suo netto sapore di mela, grande produttivitÃ  e la notevole resistenza ai patogeni."@it, "The Goldfinger banana (FHIA-01) is a banana cultivar developed in Honduras. The cultivar, developed at the Honduran Foundation for Agricultural Research (FHIA) by a team of scientists led by Phillip Rowe and Franklin Rosales, has been bred to be pest-resistant (specifically against the black sigatoka) and crop-yielding."@en ;
  owl:sameAs <http://rdf.freebase.com/ns/m.026ytv3>, dbpedia-wikidata:Q5580155, wikidata:Q5580155, yago-res:Goldfinger_banana, dbr:Goldfinger_banana, dbpedia-it:FHIA-1 ;
  dct:subject dbc:Banana_cultivars ;
  foaf:name "Musa 'FHIA-01 Goldfinger'"@en ;
  foaf:isPrimaryTopicOf wikipedia-en:Goldfinger_banana ;
  prov:wasDerivedFrom <http://en.wikipedia.org/wiki/Goldfinger_banana?oldid=646170541> ;
  dbp:group dbr:Banana ;
  dbo:origin dbr:Honduras ;
  dbo:wikiPageExternalLink <http://www.fhia.org.hn/dowloads/info_hibridos/fhia01.pdf>, <http://www.promusa.org/tiki-index.php?page=FHIA-01>, <http://archive.idrc.ca/books/reports/V221/banana.html> ;
  dbo:abstract "The Goldfinger banana (FHIA-01) is a banana cultivar developed in Honduras. The cultivar, developed at the Honduran Foundation for Agricultural Research (FHIA) by a team of scientists led by Phillip Rowe and Franklin Rosales, has been bred to be pest-resistant (specifically against the black sigatoka) and crop-yielding."@en, "La FHIA-01 nota anche come Goldfinger Ã¨ una cultivar di banana sviluppata dalla FundaciÃ³n HondureÃ±a de InvestigaciÃ³n AgrÃ­cola nel 1988. Questa banana si distingue per il suo netto sapore di mela, grande produttivitÃ  e la notevole resistenza ai patogeni."@it ;
  dbo:wikiPageRevisionID "646170541"^^<http://www.w3.org/2001/XMLSchema#integer> ;
  dbo:wikiPageID "8279730"^^<http://www.w3.org/2001/XMLSchema#integer> ;
  dbo:hybrid dbr:Musa_balbisiana, dbr:Musa_acuminata, dbr:Banana ;
  dbp:cultivar "'FHIA-01 Goldfinger'"^^rdf:langString ;
  ns16:hypernym dbr:Cultivar ;
  dbp:imageWidth "250"^^<http://www.w3.org/2001/XMLSchema#integer> .

dbr:Goldfinger dbo:wikiPageDisambiguates dbr:Goldfinger_banana .
```

