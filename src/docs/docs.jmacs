@.{
	const fs = require('fs');
	const cp = require('child_process');
	const path = require('path');

	const N_SPACES_PER_TAB = 3;
	const S_SPACES_PER_TAB = ' '.repeat(N_SPACES_PER_TAB);

	const local = p_source => path.join(__dirname, '../../docs', p_source);

	const gobble = (s_text, s_indent='') => {
		let m_pad = /^(\s+)/.exec(s_text.replace(/^([ \t]*\n)/, ''));
		if(m_pad) {
			return s_indent+s_text.replace(new RegExp(`\\n${m_pad[1]}`, 'g'), '\n'+s_indent.trim()).trim();
		}
		else {
			return s_indent+s_text.trim();
		}
	};

	const H_DATATYPES = {
		string: {
			label: 'Strings',
			href: 'strings',
			info: gobble(/* syntax: md */ `

			`),
		},

		struct: {
			label: 'Structs',
			href: 'structs',
			info: gobble(/* syntax: md */ `
				A 'struct' refers to an interface for a simple ES Object \`value\` such that \`value.constructor === Object\`. The following section documents the definitions for these interfaces.
			`),
		},
	};

	const normalize = (s_contents, s_indent) => {
		// convert tabs to spaces
		s_contents = s_contents.replace(/(^|\n)(\t+)/g, (s_0, s_nl, s_tabs) => {
			return s_nl+S_SPACES_PER_TAB.repeat(s_tabs.length);
		});

		// indent
		s_contents = s_contents.split(/\n/g).join('\n'+s_indent.replace(/^\n/g, ''));

		return s_contents;
	};

	const cat = (p_source, s_indent='') => {
		let s_contents = fs.readFileSync(local(p_source), {encoding:'utf8'});

		// prepend file name
		s_contents = `// ${p_source}\n${s_contents.trim()}`;

		return normalize(s_contents, s_indent);
	};

	const exec = (p_source, gc_exec={}, s_indent='') => {
		let {
			stdout: s_stdout,
			stderr: s_stderr,
			status: xc_exit,
			error: e_spawn,
		} = cp.spawnSync(process.execPath, [local(p_source), gc_exec.args || []], {
			...gc_exec,
			encoding: 'utf8',
		});

		if(e_spawn) {
			throw new Error(`snippet failed to run: '${p_source}';\n${e_spawn.stack}`);
		}

		if(xc_exit) {
			throw new Error(`snippet did not execute sucessfully: '${p_source}';\n${s_stderr}`);
		}

		if(!s_stdout) {
			throw new Error(`snippet did not produce any output: '${p_source}'`);
		}

		return normalize(s_stdout, s_indent);
	};

	// const datatype_sections = (h_sections) => {
	// 	let s_out = '';

	// 	// each section in hash
	// 	for(let s_datatype in h_sections) {
	// 		let g_datatype = H_DATATYPES[s_datatype];

	// 		let {
	// 			label: s_label,
	// 			href: s_href,
	// 			info: s_info,
	// 		} = g_datatype;

	// 		// datatype section header
	// 		s_out += gobble(/* syntax: md */ `
	// 			<a name="${s_href}" />

	// 			### ${s_label}:
	// 			${s_info}
	// 		`);

	// 		// each interface in section
	// 		let h_section = h_sections[s_datatype];
	// 		for(let s_interface in h_section) {
	// 			let g_interface = h_section[s_interface];


	// 		}
	// 	}
	// };
}
