@import '../schema.js.jmacs'

const bkit = require('bkit');

module.exports = {
	/* eslint-disable quotes, quote-props */
	...@{
		JSON.stringify(
			bat_define('protocol', 'brp:bitmap:ab', {
				implements: 'bri:bitmap',
				datatypes:{ 
					vuint: 'brdt:vuint',
					typed_array: 'brdt:typed-array',
				},
				members: {
					bitsequence: 'bri:bitsequence',
				},
			}), null, '\t')},
	/* eslint-enable */

	class: dc_super => class extends dc_super {
		constructor(kd_datatypes, kd_members) {
			super(kd_datatypes, kd_members);

			// key count
			let nl_keys = kd_datatypes.vuint();

			// adjacency list
			let at_adj = kd_datatypes.typed_array();

			// bitsequence
			let k_bs = kd_members.bitsequence();

			Object.assign(this, {
				key_count: nl_keys,
				adj: at_adj,
				bs: k_bs,
			});
		}

		/**
		 * @yield {GTAR_Uint_TermId}
		 */
		* each() {
			// ref key count
			let nl_keys = this.key_count;

			// iterate id values in range
			for(let i_a=1; i_a<=nl_keys; i_a++) {
				yield i_a;
			}
		}

		/**
		 * @param  {integer} a - the id of the key for which to yield all values
		 * @yield {GTAR_Struct_QuadIdOffset}
		 */
		* fetch_values(i_key) {
			// select lo/hi index of given `key` id
			let [i_lo, i_hi] = this.bs.select_1s_lo_hi(i_key);

			// ref adjacency list
			let at_adj = this.adj;

			// each symbol in list given by bitmap's `key`
			for(let i_adj=i_lo; i_adj<i_hi; i_adj++) {
				yield {
					id: at_adj[i_adj],
					offset: i_adj - i_lo,
				};
			}
		}

		/**
		 * @param  {integer} a - the id of the key for which to yield all values
		 * @yield {GTAR_Uint_QuadId}
		 */
		* fetch_ids(i_key) {
			// select lo/hi index of given `key` id
			let [i_lo, i_hi] = this.bs.select_1s_lo_hi(i_key);

			// ref adjacency list
			let at_adj = this.adj;

			// each symbol in list given by bitmap's `key`
			for(let i_adj=i_lo; i_adj<i_hi; i_adj++) {
				yield at_adj[i_adj];
			}
		}
	},
};
