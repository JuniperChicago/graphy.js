@import '../schema.js.jmacs'

const bkit = require('bkit');

module.exports = {
	/* eslint-disable quotes, quote-props */
	...@{
		JSON.stringify(
			bat_define('protocol', 'brp:bitsequence:plain', {
				implements: 'bri:bitsequence',
				// datatypes: {
				// 	raw: 'brdt:bytes',
				// },
			}), null, '\t')},
	/* eslint-enable */

	class: dc_super => class extends dc_super {
		constructor(kd_datatypes, kd_members) {
			super(kd_datatypes, kd_members);

			// bytes
			let atu8_bs = kd_datatypes.grab();

			Object.assign(this, {
				raw: atu8_bs,
			});
		}

		/**
		 * count the number of occurrences of `1` within the sequence up until the given position
		 * @param  {integer} of - a position in the sequence up until which to count the occurrences of `1`
		 * @return {integer} the number of occurrences of `1` preceeding the given `of` position
		 */
		rank_1(i_of) {
			
		}

		/**
		 * count the number of occurrences of `1` within the sequence up until the given list of positions
		 * @param  {Array<integer>} ofs - a list of increasing, sorted positions in the sequence up until which to count (for each) the occurrences of `1`
		 * @return {Array<integer>} a list of the number of occurrences of each `1` preceeding the given `ofs` positions
		 */
		ranks_1(a_ofs) {
			
		}

		/**
		 * locate the position of the given `nth` occurrence of `1` within the sequence
		 * @param  {integer} nth
		 * @return {integer} position of the `nth` occurrence of `1` within the sequence
		 */
		select_1(i_nth) {
			
		}

		/**
		 * locate the position of the given `nth` occurrence of `1` within the sequence
		 * @param  {Array<integer>} nths
		 * @return {Array<integer>} list of positions of each `nths` occurrences of `1` within the sequence
		 */
		select_1s(a_nths) {
			
		}

		/**
		 * locate the pair of positions of the given `nth_hi` occurrences of `1` within the sequence
		 * @param  {integer} nth_hi
		 * @return {Array<integer>} pair of positions of each `nth_*` occurrences of `1` within the sequence
		 */
		select_1s_lo_hi(i_nth_hi) {
			
		}
	},
};
