@import '../schema.js.jmacs'

module.exports = {
	/* eslint-disable quotes, quote-props */
	...@{
		JSON.stringify(
			bat_define('datatype', 'brd:vuint', {}), null, '\t')},
	/* eslint-enable */

	decode() {
		let {
			contents: at,
			read: i,
		} = this;

		// 1 byte value
		let x = at[i];

		// first byte is end of int
		if(x < 0x80) {
			this.read += 1;
			return x;
		}

		// set int value to lower value
		let x_value = x & 0x7f;

		// 2 bytes; keep going
		x = at[i+1];

		// add lower value
		x_value |= (x & 0x7f) << 7;

		// last byte of number
		if(x < 0x80) {
			this.read += 2;
			return x_value;
		}

		// 3 bytes; keep going
		x = at[i+2];

		// add lower value
		x_value |= (x & 0x7f) << 14;

		// last byte of number
		if(x < 0x80) {
			this.read += 3;
			return x_value;
		}

		// 4 bytes; keep going
		x = at[i+3];

		// add lower value
		x_value |= (x & 0x7f) << 21;

		// last byte of number
		if(x < 0x80) {
			this.read += 4;
			return x_value;
		}

		// 5 bytes; be cautious
		x = at[i+4];

		// safe to shift
		let x_hi = (x & 0x7f);
		if(x_hi < 0x07) {
			// add lower value
			x_value |= x_hi << 28;
		}
		// cannot shift
		else {
			// shift by means of float multiplication
			x_value += (x_hi * 0x10000000);
		}

		// last byte of number
		if(x < 0x80) {
			this.read += 5;
			return x_value;
		}

		// 6 bytes (or more)
		throw new Error('decoding integers of 6 bytes or more not supported');
	},
};
