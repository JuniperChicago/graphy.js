@.{
	const p_base = 'https://bat-rdf.link/';

	const h_prefixes = {
		bre: `${p_base}encoding/`,
		brdt: `${p_base}datatype/`,
		bri: `${p_base}interface/`,
		brp: `${p_base}protocol/`,
		rdfjs: '',
	};


	const protocol_properties = (g_proto) => {
		let g_rdf = {};

		// implements
		if(g_proto.implements) {
			g_rdf = {...g_rdf,
				'bat:implements': 'bri:dictionary.concise-term',
			};
		}

		// datatypes
		if(g_proto.datatypes) {
			g_rdf = {...g_rdf,
				'bat:datatype': Object.entries(g_proto.datatypes)
					.map(([si_method, sct_encoding]) => ({
						'bat:method': '"'+si_method,
						'bat:encoding': sct_encoding,
					})),
			};
		}

		// members
		if(g_proto.members) {
			g_rdf = {...g_rdf,
				'bat:member': Object.entries(g_proto.members)
					.map(([si_method, sct_encoding]) => ({
						'bat:method': '"'+si_method,
						'bat:encoding': sct_encoding,
					})),

				// 'bat:members': [Object.entries(g_proto.members).map(([s_name, z_value]) => {
				// 	if('string' === typeof z_value) {
				// 		let sct_value = z_value;
				// 		return {
				// 			'bat:name': '"'+s_name,
				// 			'bat:satisfies': sct_value,
				// 		};
				// 	}
				// 	else {
				// 		return {
				// 			'bat:name': '"'+s_name,
				// 			'bat:satisfies': z_value.encoding,
				// 			'bat:quantifier': {
				// 				'bat:min': 1,
				// 				'bat:max': 12,
				// 			},
				// 		};
				// 	}
				// })],
			};
		}

		// object
		return {
			a: 'bat:protocol',
			...g_rdf,
		};
	};

	const datatype_properties = (g_datatype) => {
		// datatypes
		if(g_proto.datatypes) {
			g_rdf = {...g_rdf,
				'bat:datatype': Object.entries(g_proto.datatypes)
					.map(([si_method, sct_encoding]) => ({
						'bat:method': '"'+si_method,
						'bat:encoding': sct_encoding,
					})),
			};
		}

	};

	const bat_define = (s_type, sct_self, g_define) => {
		// inject prefixes
		let g_out = {
			prefixes: h_prefixes,
			subject: sct_self,
		};

		// protocol descriptor
		if('protocol' === s_type) {
			g_out = {
				...g_out,
				properties: protocol_properties(g_define),
			};
		}
		// datatype descriptor
		else if('datatype' === s_type) {
			g_out = {
				...g_out,
				properties: datatype_properties(g_define),
			};
		}

		return g_out;
	};
}

@$ S_PREFIXES = 'prefixes';
@$ S_TERM_HA  = 'hops_absolute';
@$ S_TERM_SA  = 'subjects_absolute';
@$ S_TERM_PA  = 'predicates_absolute';
@$ S_TERM_OA  = 'objects_absolute';
@$ S_TERM_HP  = 'hops_prefixed';
@$ S_TERM_SP  = 'subjects_prefixed';
@$ S_TERM_PP  = 'predicates_prefixed';
@$ S_TERM_OP  = 'objects_prefixed';
@$ S_TERM_LP  = 'literals_plain';
@$ S_TERM_LL  = 'literals_languaged';
@$ S_TERM_LDA = 'literals_datatyped_absolute';
@$ S_TERM_LDP = 'literals_datatyped_prefixed';
