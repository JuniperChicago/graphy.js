
@$ polyfill = {
	queueMicrotask() {
		return /* syntax: js */ `
			// queueMicrotask shim
			{
${/*
				// whether or not to (re)define
				let b_redefine = false;

				// function is defined
				if('function' === typeof queueMicrotask) {

					// non-native implementation
					if(-1 === queueMicrotask.toString().indexOf('[native code]')) {
						b_redefine = true;
					}
				}
				// not defined or not a function
				else {
					b_redefine = true;
				}

				// (re)define
				if(b_redefine) {
*/''}
				// not defined or not a function
				if('function' !== typeof queueMicrotask) {
					// create resolved promise
					let dp_resolve = Promise.resolve();

					// try to redefine
					try {
						// eslint-disable-next-line no-global-assign
						queueMicrotask = fk => dp_resolve.then(fk)
							.catch(e_callback => setTimeout(() => {
								throw e_callback;
							}, 0));
					}
					// oh well, at least we tried
					catch(e_define) {}
				}
			}
		`;
	},
};
