@import './common.jmacs'
@import './symbols.jmacs'

const {
	Match_Term,
	Match_Terms,
	Match_Role,
} = require('./match.js');


@.{
	const A_ROLES = [
		'node',
		'literal',
		'root',
		'leaf',
		'subject',
		'object',
		'hop',
		'objectNode',
		'out',
		'inv',
	];
}

@*{
	for(let s_role of A_ROLES) {
		yield /* syntax: js */ `const S_ROLE_${s_role.toUpperCase()} = '${s_role}';\n`;
	}
}

const AXM_USE = [
	'spo',  // Ks Kp Ko : 0 0 0
	'spo',  // Ks Kp Vo : 0 0 1
	'spo', // 'osp',  // Ks Vp Ko : 0 1 0
	'spo',  // Ks Vp Vo : 0 1 1
	'ops', // 'pos',  // Vs Kp Ko : 1 0 0
	'pso', // 'pos',  // Vs Kp Vo : 1 0 1
	'ops', // 'osp',  // Vs Vp Ko : 1 1 0
	'spo',  // Vs Vp Vo : 1 1 1
];


class Selection {
	constructor(k_store, k_pattern) {
		Object.assign(this, {
			store: k_store,
			pattern: k_pattern,
		});
	}

	/**
	 * @return {GTAR_ResultArray} a list of `GTAR_ResultRow`s
	 */
	rows() {
		debugger;
		// fetch fields first
		let a_fields = this.pattern.fields();

		// prep rows list
		let a_rows = [];

		// evaluate pattern
		let h_results = this.consume(this.pattern);

		// each result head
		for(let i_head in h_results) {
			// concatenate rows from this result head
			for(let w_result of h_results[i_head]) {
				a_rows.push(w_result);
			}
		}

		// set fields
		a_rows.fields = a_fields;

		return a_rows;
	}

	next_triple_pattern(km_head, k_pattern) {
		let k_graph = this.graph;

		// edge of triple pattern
		let km_edge = k_pattern.shift();

		// tail of triple pattern
		let km_tail = k_pattern.shift();


		// assume normal direction
		let b_inverse = false;

		// determine data use
		let xm_triple_pattern = 0;


		// body is normal direction
		if('out' === km_edge.role) {
			// Vs
			if(km_head instanceof Match_Role) xm_triple_pattern |= 4;

			// Vo
			if(km_tail instanceof Match_Role) xm_triple_pattern |= 1;
		}
		// body is inverse direction
		else {
			b_inverse = true;

			// Vo
			if(km_head instanceof Match_Role) xm_triple_pattern |= 1;

			// Vs
			if(km_tail instanceof Match_Role) xm_triple_pattern |= 4;
		}

		// Vp
		if(km_edge instanceof Match_Role) xm_triple_pattern |= 2;


		// place the subject, predicate and object appropriately
		let h_spo = {
			// claim subjects
			s: b_inverse? km_tail: km_head,

			// predicate(s) of triple pattern
			p: km_edge,

			// claim objects
			o: b_inverse? km_head: km_tail,
		};


		// determine which index to use
		let s_use = AXM_USE[xm_triple_pattern];
debugger;
		// set a, b, c terms
		return {
			h_a: h_spo[s_use[0]],
			h_b: h_spo[s_use[1]],
			h_c: h_spo[s_use[2]],

			k_triples: this.store.dataset.use(s_use),
			b_inverse,

			km_head,
			km_edge,
			km_tail,
		};
	}



	consume(k_pattern) {
		let k_graph = this.graph

		// head of triple pattern
		let km_head = k_pattern.shift();

		// head has forks
		if(km_head.forks) {
			throw new Error('probing first');

			// //
			// let a_combine = []; //a_rows;

			// // each fork
			// let a_forks = km_head.forks;
			// for(let i_fork=0; i_fork<a_forks.length; i_fork++) {
			// 	let a_fork_rows = [];

			// 	// destruct fork pattern
			// 	let k_pattern_frag = a_forks[i_fork];

			// 	// play out pattern within fork
			// 	this.proceed(k_pattern_frag, {}, km_head);

			// 	// only if there are results
			// 	if(a_fork_rows.length) {
			// 		// nothing to combine with; set directly
			// 		if(!a_combine.length) {
			// 			a_combine = a_fork_rows;
			// 		}
			// 		// combinations
			// 		else {
			// 			for(let i_combine_row=a_combine.length-1; i_combine_row>=0; i_combine_row--) {
			// 				// take combine row out from array
			// 				let h_combine_row = a_combine[i_combine_row];
			// 				a_combine.splice(i_combine_row, 1);

			// 				// each fork row to combine
			// 				for(let i_fork_row=0; i_fork_row<a_fork_rows.length; i_fork_row++) {
			// 					let h_fork_row = a_fork_rows[i_fork_row];

			// 					// copy original combine row
			// 					let h_copy_row = Object.create(h_combine_row);

			// 					// set each property from fork onto copy row
			// 					for(let i_property in h_fork_row) {
			// 						h_copy_row[i_property] = h_fork_row[i_property];
			// 					}

			// 					// push copy back onto combine
			// 					a_combine.push(h_copy_row);
			// 				}
			// 			}
			// 		}
			// 	}
			// }
		}
		// no forks
		else {
			// yes pattern
			if(k_pattern.length) {
				return this.proceed(k_pattern, {}, km_head);
			}
			// no pattern
			else {
				// head bind
				let s_bind = km_head.bind;

				// term position
				let s_term;
				switch(km_head.role) {
					case S_ROLE_HOP:
					case S_ROLE_SUBJECT: s_term = 's'; break;
					case S_ROLE_OBJECTNODE:
					case S_ROLE_LITERAL:
					case S_ROLE_OBJECT: s_term = 'o'; break;
					default: {
						throw new Error('cannot determine term position');
					}
				}

				// destruct iterator
				let f_a = this.generate_a_rows(km_head, s_term);

throw new Error('no pattern implement');
				// //
				// let h_data = km_head.data;
				// let s_save = h_data && h_data.save;

				// // no bind, no save
				// if(!s_bind && !s_save) return [];

				// // results list
				// let a_results = [];

				// for(let {id:i_a, row:h_row_a} of f_a({})) {
				// 	a_results.push(h_row_a);
				// }

				// return {
				// 	0: a_results,
				// };
			}
		}
	}

	fork(k_root_pattern, h_row__, km_head) {
		//
		let a_living = [];
		let h_survivors = {};

		// each fork
		let a_forks = km_head.forks;
		for(let i_fork=0; i_fork<a_forks.length; i_fork++) {
			// destruct fork pattern
			let k_pattern_frag = a_forks[i_fork].copy();

			// zero path length under fork
			if(!k_pattern_frag.length) {
				console.warn('empty path under fork');
				continue;
			}

			// play out pattern within fork
			let h_alive = this.proceed(k_pattern_frag, h_row__, km_head);

			// remove pointer to subject row so that we only extend it once
			h_row__ = {};

			// object.keys
			a_living.length = 0;
			for(let i_alive in h_alive) {
				a_living.push(~~i_alive);

				// 
				if(h_survivors[i_alive]) {
					// fork rows to combine
					let a_fork_rows = h_alive[i_alive];

					//
					let a_combine = h_survivors[i_alive];
					for(let i_combine_row=a_combine.length-1; i_combine_row>=0; i_combine_row--) {
						// take combine row out from array
						let h_combine_row = a_combine[i_combine_row];
						a_combine.splice(i_combine_row, 1);

						// each fork row to combine
						for(let i_fork_row=0; i_fork_row<a_fork_rows.length; i_fork_row++) {
							let h_fork_row = a_fork_rows[i_fork_row];

							// copy original combine row
							let h_copy_row = Object.create(h_combine_row);

							// set each property from fork onto copy row
							for(let i_property in h_fork_row) {
								h_copy_row[i_property] = h_fork_row[i_property];
							}

							// push copy back onto combine
							a_combine.push(h_copy_row);
						}
					}
				}
				// first survivor to claim this index
				else {
					h_survivors[i_alive] = h_alive[i_alive];
				}
			}

			// nothing lives!
			if(!a_living.length) {
				return h_alive;
			}
			// one survivor
			else if(1 === a_living.length) {
				// mutate head for next fork
				km_head = {
					id: a_living[0],
					role: km_head.role,
				};
			}
			// multiple survivors
			else {
				// is living sorted?
				// mutate head for next fork
				km_head = {
					ids: a_living,
					role: km_head.role,
				};
			}
		}

		// prep results list
		let h_results = {
			size: 0,
		};

		// exitted with living heads
		if(a_living.length) {
			// copy only living results
			let n_living = a_living.length;
			for(let i=0; i<n_living; i++) {
				let i_survivor = a_living[i];
				h_results[i_survivor] = h_survivors[i_survivor];
			}

			// update size
			h_results.size = n_living;
		}

		//
		return h_results;
	}

	proceed(k_pattern, h_row__, km_head) {
		let k_graph = this.graph;

		// fetch next triple pattern
		let {
			h_a, h_b, h_c,
			k_triples,
			b_inverse, h_edge, h_tail,
		} = this.next_triple_pattern(km_head, k_pattern);

		// ref bindings
		let s_bind_a = h_a.bind;
		let s_bind_b = h_b.bind;
		let s_bind_c = h_c.bind;

		// save which heads were used and their associated rows
		let h_results = {};

		@//{mk_proceed_eval()}

		// return which heads were used
		return h_results;
	}

	@//{mk_generator_a(false)}
	@//{mk_generator_a(true)}

	@//{mk_generator_b(false)}
	@//{mk_generator_b(true)}

	@//{mk_generator_c(false)}
	@//{mk_generator_c(true)}
}

module.exports = Selection;
