



class Match {
	constructor(i_index, s_role, n_min=0, n_max=Infinity) {
		Object.assign(this, {
			/**
			 * unique match index to distinguish from other matches
			 * @type {uint}
			 */
			index: i_index,

			/**
			 * the role this term fulfills
			 * @type {GTAR_RoleString}
			 */
			role: s_role,

			/**
			 * minimum number of Terms that should be matched
			 * @type {uint}
			 */
			cardinality_min: n_min,

			/**
			 * maximum number of Terms that should be matched
			 * @type {uint|Infinity}
			 */
			cardinality_max: n_max,

			/**
			 * name of the key to write to on the results object
			 * @type {string}
			 */
			bind: null,

			/**
			 * name of the key to compare against this match against for joining pattern results
			 * @type {string}
			 */
			join: null,

			/**
			 * filter or select matches by an arbitrary data index
			 * @type {GTAR_DataHandler}
			 */
			data: null,

			/**
			 * filter matches by a user-defined callback function
			 * @type {function(term: RDFJS_Term)}
			 */
			filter: null,

			/**
			 * instead of binding the matched Term instance to the results, apply a user-defined transform function
			 * @type {function(term: RDFJS_Term)}
			 */
			transform: null,

			sample: Infinity,
		});
	}

	validate_cardinality(c_terms) {
		// assert min cardinality
		if(c_terms < this.cardinality_min) {
			throw new Error(`cardinality restriction of having at least ${this.cardinality_min} was not met`);
		}

		// assert max cardinality
		if(c_terms > this.cardinality_max) {
			throw new Error(`cardinality restriction of having at most ${this.cardinality_max} was not met`);
		}
	}

	/**
	 * @abstract
	 */
	match() {
		throw new Error(`The '.match' method should be overriden by sub class: ${this.constructor.name}`);
	}
}


class Match_Term extends Match {
	constructor(i_index, s_role, sct_term, n_min, n_max) {
		super(i_index, s_role, n_min, n_max);
		this.term = sct_term;
	}

	match(k_exec) {
		let {
			term: sct_term,
			role: s_role,
		} = this;

		// resolve ct_string to term id
		let i_term = k_exec.store.find(sct_term, s_role);

		// no match
		if(!i_term) {
			return k_exec.fail(this.index, sct_term, s_role);
		}

		
	}
}

class Match_Terms extends Match {
	constructor(i_index, s_role, a_terms, n_min, n_max) {
		super(i_index, s_role, n_min, n_max);
		this.terms = a_terms;
	}

	match(k_exec) {
		// resolve each ct_string to its term id
		let a_terms = this.terms.map(sct => k_exec.resolve(sct));
	}
}

class Match_Role extends Match {
	constructor(i_index, s_role, n_min, n_max) {
		super(i_index, s_role, n_min, n_max);
	}

	match(k_exec) {

	}
}

module.exports = {
	Match_Term,
	Match_Terms,
	Match_Role,
};
