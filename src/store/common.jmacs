
@> constants()
	// for creating new prefixes
	const R_COMPRESS = /^(.*?)([^/#]*)$/;
@;



@> compress_iri(graph)
	// attempt to compress
	let m_compress = R_COMPRESS.exec(p_iri);

	// cannot be compressed
	if(!m_compress) {
		// use iriref
		s_word = '\u0002'+p_iri;
	}
	// try finding compressed prefix id
	else {
		// lookup prefix id from prefix lookup
		let s_prefix_id = @{graph}.prefix_lookup[m_compress[1]];

		// prefix not exists
		if(!s_prefix_id) {
			// no such node
			s_word = '';
		}
		// found the prefix
		else {
			// construct word using prefix
			s_word = s_prefix_id+'\u0001'+m_compress[2];
		}
	}
@;


@> compress_tt_node(tt, on_fail, graph)
	@- !graph
		@$ graph = 'this';
	@;

	let s_word = '';

	// iriref
	if('<' === @{tt}[0]) {
		// construct iri
		let p_iri = @{tt}.slice(1, -1);

		@{compress_iri(graph)}
	}
	// prefixed name
	else {
		// extract prefix / suffix
		let [s_user_prefix, s_suffix] = @{tt}.split(':');

		// lookup dict prefix from mapped user prefix
		let s_prefix_id = @{graph}.user_prefixes[s_user_prefix];

		// prefix mapping does not exist
		if(!s_prefix_id) {
			// grab user prefix iri
			let p_prefix_iri = @{graph}.user_prefix_iris[s_user_prefix];

			// no such user prefix defined
			if(!p_prefix_iri) {
				throw `no such prefix "${s_user_prefix}"`;
			}

			// reconstruct full iri
			let p_iri = p_prefix_iri+s_suffix;

			@{compress_iri(graph)}
		}
		// prefix mapping does exist
		else {
			// construct word using prefix
			s_word = s_prefix_id+'\u0001'+s_suffix;
		}
	}

	// no such node
	if(!s_word) 
	@- on_fail
		@{on_fail};
	@:
		return 0;
	@;
@;


@> mk_uint_array(size, range)
	@{range} <= 0xff
		? new Uint8Array(@{size})
		: (@{range} <= 0xffff
			? new Uint16Array(@{size})
			: (@{range} <= 0xffffffff
				? new Uint32Array(@{size})
				: new Float64Array(@{size})))
@;


@> string_to_buffer(str, buffer)
	let @{buffer};

	// find out-of-bound characters
	let a_oob_matches = @{str}.match(/[^\u0000-\u007f]/g);
	if(a_oob_matches) {
		// number of out-of-bound characters
		let n_oobs = a_oob_matches.length;

		// estimate utf8 length (add weighted average probability of exceeding 2 bytes)
		let n_utf8_len = @{str}.length + (n_oobs * 1.9395);

		// estimate utf16 length (add weighted average probability of exceeding 2 bytes)
		let n_utf16_len = (@{str}.length * 2) + (n_oobs * 1.8858);

		// encode in whichever probably saves more space
		@{buffer} = n_utf8_len <= n_utf16_len? encode_utf_8(@{str}): encode_utf_16(@{str});
	}
	// all characters can be encoded in utf8
	else {
		@{buffer} = encode_utf_8(@{str});
	}
@;



@> each(s_name)
	for(let i_@{s_name}=0, n_@{s_name}s=a_@{s_name}s.length; i_@{s_name}<n_@{s_name}s; i_@{s_name}++)
@;

@> end_each()
	@- close_each_abc
		@{close_each_abc}
		@$ close_each_abc = null;
	@+ close_each_ab
		@{close_each_ab}
		@$ close_each_ab = null;
	@:
		}
	@;
@;


@> encoders()
	const I_UTF_16_TOKEN = 0x04;
	const AB_UTF_16_TOKEN = Buffer.from([I_UTF_16_TOKEN]);

	const encode_utf_8 = (s_chunk) => Buffer.from(s_chunk, 'utf-8');
	const encode_utf_16le = (s_chunk) => {
		// encode chunk as utf-16le
		let ab_chunk = Buffer.from(s_chunk, 'utf-16le');

		// prefix buffer w/ utf-16 token
		return Buffer.concat([AB_UTF_16_TOKEN, ab_chunk], ab_chunk.length + 1);
	};

	const R_OUTSIDE_UTF_8_SINGLE_BYTE_RANGE = /[^\u0000-\u007f]/g;
	const encode_utf_auto = (s_str) => {
		// encode in utf-8
		let ab_utf8 = encode_utf_8(s_str);

		// string contains out-of-bounds characters
		if(R_OUTSIDE_UTF_8_SINGLE_BYTE_RANGE.test(s_str)) {
			// encode in utf-16
			let ab_utf16 = encode_utf_16le(s_str);

			// return whichever saves more space
			if(ab_utf8.length <= ab_utf16.length) {
				return ab_utf8;
			}
			else {
				return ab_utf16;
			}
		}
		// all characters can be encoded in utf8
		else {
			return ab_utf8;
		}
	};
@;


@> decoders()
	const decode_utf_8 = (ab_chunk) => ab_chunk.toString('utf-8');
	const decode_utf_16le = (ab_chunk) => ab_chunk.toString('utf-16le');
@;


@> buffer_utils()
	const join_buffers = (ab_a, ab_b) => {
		return Buffer.concat([ab_a, ab_b], ab_a.length + ab_b.length);
	};
@;

